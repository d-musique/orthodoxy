# Copyright: D.M., 2025-present
# SPDX-License-Identifier: GPL-3.0-or-later

@PACKAGE_INIT@

set(orthodoxy_FOUND FALSE)
set(orthodoxy_plugin_FOUND FALSE)

if(NOT DEFINED CMAKE_CXX_COMPILER_ID)
  message(WARNING "orthodoxy: CXX language must be enabled first")
  return()
endif()

set(orthodoxy_FOUND TRUE)

if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  execute_process(COMMAND "${CMAKE_CXX_COMPILER}" "-dumpversion"
    OUTPUT_VARIABLE _clangVersion
    OUTPUT_STRIP_TRAILING_WHITESPACE
    COMMAND_ERROR_IS_FATAL ANY)
  string(FIND "${_clangVersion}" "." _clangVersionDotPos)
  string(SUBSTRING "${_clangVersion}" 0 "${_clangVersionDotPos}" _clangMajorVersion)
  #
  if(CMAKE_HOST_WIN32)
    set(_orthodoxyPluginFile "orthodoxy.dll")
  else()
    set(_orthodoxyPluginFile "orthodoxy.so")
  endif()
  #
  if(NOT EXISTS "@PACKAGE_ACTUAL_CLANG_PLUGIN_BASE_DIR@/${_clangMajorVersion}/${_orthodoxyPluginFile}")
    message(STATUS "orthodoxy plugin: NOT FOUND")
  else()
    set_and_check(ORTHODOXY_CLANG_PLUGIN_BASE_DIR "@PACKAGE_ACTUAL_CLANG_PLUGIN_BASE_DIR@")
    set_and_check(ORTHODOXY_CLANG_PLUGIN_DIR "${ORTHODOXY_CLANG_PLUGIN_BASE_DIR}/${_clangMajorVersion}")
    set_and_check(ORTHODOXY_CLANG_PLUGIN "${ORTHODOXY_CLANG_PLUGIN_DIR}/${_orthodoxyPluginFile}")
    message(STATUS "Found orthodoxy plugin: ${ORTHODOXY_CLANG_PLUGIN}")
    #
    add_library(orthodoxy-plugin INTERFACE)
    target_compile_options(orthodoxy-plugin INTERFACE "-fplugin=${ORTHODOXY_CLANG_PLUGIN}")
    add_library(orthodoxy::plugin ALIAS orthodoxy-plugin)
    set(orthodoxy_plugin_FOUND TRUE)
  endif()
  #
  unset(_clangVersion)
  unset(_clangVersionDotPos)
  unset(_clangMajorVersion)
  unset(_orthodoxyPluginFile)
elseif(CMAKE_CXX_COMPILER_ID)
  message(STATUS "orthodoxy plugin: not available for compiler ${CMAKE_CXX_COMPILER_ID}")
endif()

check_required_components(orthodoxy)
